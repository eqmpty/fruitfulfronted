{"ast":null,"code":"/**\n * resolveAuthorizationHeader - Attempts to parse the token from the Authorization header\n *\n * This function checks the Authorization header for a `Bearer <token>` pattern and return the token section\n *\n * @param {Object}        ctx  The ctx object passed to the middleware\n * @param {Object}        opts The middleware's options\n * @return {String|null}  The resolved token or null if not found\n */\nmodule.exports = function resolveAuthorizationHeader(ctx, opts) {\n  if (!ctx.header || !ctx.header.authorization) {\n    return;\n  }\n\n  const parts = ctx.header.authorization.split(' ');\n\n  if (parts.length === 2) {\n    const scheme = parts[0];\n    const credentials = parts[1];\n\n    if (/^Bearer$/i.test(scheme)) {\n      return credentials;\n    }\n  }\n\n  if (!opts.passthrough) {\n    ctx.throw(401, 'Bad Authorization header format. Format is \"Authorization: Bearer <token>\"');\n  }\n};","map":{"version":3,"sources":["/home/ouroboroser/Рабочий стол/try/node_modules/koa-jwt/lib/resolvers/auth-header.js"],"names":["module","exports","resolveAuthorizationHeader","ctx","opts","header","authorization","parts","split","length","scheme","credentials","test","passthrough","throw"],"mappings":"AAAA;;;;;;;;;AASAA,MAAM,CAACC,OAAP,GAAiB,SAASC,0BAAT,CAAoCC,GAApC,EAAyCC,IAAzC,EAA+C;AAC5D,MAAI,CAACD,GAAG,CAACE,MAAL,IAAe,CAACF,GAAG,CAACE,MAAJ,CAAWC,aAA/B,EAA8C;AAC1C;AACH;;AAED,QAAMC,KAAK,GAAGJ,GAAG,CAACE,MAAJ,CAAWC,aAAX,CAAyBE,KAAzB,CAA+B,GAA/B,CAAd;;AAEA,MAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACpB,UAAMC,MAAM,GAAGH,KAAK,CAAC,CAAD,CAApB;AACA,UAAMI,WAAW,GAAGJ,KAAK,CAAC,CAAD,CAAzB;;AAEA,QAAI,YAAYK,IAAZ,CAAiBF,MAAjB,CAAJ,EAA8B;AAC1B,aAAOC,WAAP;AACH;AACJ;;AACD,MAAI,CAACP,IAAI,CAACS,WAAV,EAAuB;AACnBV,IAAAA,GAAG,CAACW,KAAJ,CAAU,GAAV,EAAe,4EAAf;AACH;AACJ,CAlBD","sourcesContent":["/**\n * resolveAuthorizationHeader - Attempts to parse the token from the Authorization header\n *\n * This function checks the Authorization header for a `Bearer <token>` pattern and return the token section\n *\n * @param {Object}        ctx  The ctx object passed to the middleware\n * @param {Object}        opts The middleware's options\n * @return {String|null}  The resolved token or null if not found\n */\nmodule.exports = function resolveAuthorizationHeader(ctx, opts) {\n    if (!ctx.header || !ctx.header.authorization) {\n        return;\n    }\n\n    const parts = ctx.header.authorization.split(' ');\n\n    if (parts.length === 2) {\n        const scheme = parts[0];\n        const credentials = parts[1];\n\n        if (/^Bearer$/i.test(scheme)) {\n            return credentials;\n        }\n    }\n    if (!opts.passthrough) {\n        ctx.throw(401, 'Bad Authorization header format. Format is \"Authorization: Bearer <token>\"');\n    }\n};\n"]},"metadata":{},"sourceType":"script"}