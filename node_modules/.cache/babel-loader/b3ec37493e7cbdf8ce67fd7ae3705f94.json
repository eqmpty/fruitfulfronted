{"ast":null,"code":"const Router = require('koa-router');\n\nconst router = new Router();\n\nconst jwtSecret = require('../config/jwt_config');\n\nconst jwt = require('jsonwebtoken');\n\nconst passport = require('koa-passport');\n\nconst tokenGenerator = require('uuid-token-generator');\n\nconst bcrypt = require('bcryptjs');\n\nconst models = require('../models');\n\nrouter.post('/helper', async (ctx, next) => {\n  ctx.body = 'Welcome';\n});\nrouter.post('/signup', async (ctx, next) => {\n  try {\n    const {\n      nick,\n      name,\n      email,\n      password\n    } = ctx.request.body;\n    let hashedPassword = bcrypt.hashSync(password, 10);\n    let userData = await models.User.create({\n      nick,\n      name,\n      email,\n      password: hashedPassword\n    });\n    ctx.body = userData;\n    await next();\n  } catch (error) {\n    console.error('error: ', error);\n    ctx.status = 400;\n    ctx.body = {\n      status: 'User authorization error 2'\n    };\n  }\n});\nrouter.post('/login', async (ctx, next) => {\n  return passport.authenticate('local', async (err, user, info, status) => {\n    if (err) {\n      return ctx.status = 400;\n    } else {\n      if (user) {\n        ctx.login(user);\n        const payload = {\n          id: user.id,\n          nick: user.nick\n        };\n        const accessToken = jwt.sign(payload, jwtSecret.secret, {\n          expiresIn: jwtSecret.tokenLife\n        });\n        const refreshToken = jwt.sign(payload, jwtSecret.refreshTokenSecret, {\n          expiresIn: jwtSecret.refreshTokenLife\n        });\n        ctx.body = {\n          user: user.name,\n          accessToken: `Bearer ${accessToken}`,\n          refreshToken\n        };\n      } else {\n        ctx.status = 400;\n        ctx.body = {\n          status: 'error'\n        };\n      }\n    }\n  })(ctx, next);\n});\nrouter.post('/custom', async (ctx, next) => {\n  await passport.authenticate('jwt', (err, user) => {\n    if (user) {\n      ctx.body = 'Hello' + user.name;\n    } else {\n      ctx.body = 'No such user';\n      console.log('Error ' + err);\n    }\n  })(ctx, next);\n});\nmodule.exports = router;","map":{"version":3,"sources":["/home/ouroboroser/Рабочий стол/try/routes/authentication.js"],"names":["Router","require","router","jwtSecret","jwt","passport","tokenGenerator","bcrypt","models","post","ctx","next","body","nick","name","email","password","request","hashedPassword","hashSync","userData","User","create","error","console","status","authenticate","err","user","info","login","payload","id","accessToken","sign","secret","expiresIn","tokenLife","refreshToken","refreshTokenSecret","refreshTokenLife","log","module","exports"],"mappings":"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","sourcesContent":["const Router = require('koa-router');\nconst router = new Router();\nconst jwtSecret = require('../config/jwt_config');\nconst jwt = require('jsonwebtoken');\nconst passport = require('koa-passport');\nconst tokenGenerator = require('uuid-token-generator');\nconst bcrypt = require('bcryptjs');\n\nconst models = require ('../models');\n\nrouter.post('/helper', async (ctx, next) => {\n    ctx.body = 'Welcome';\n})\n\nrouter.post('/signup', async (ctx, next) => {\n    try {\n        const { nick, name, email, password} = ctx.request.body\n        let hashedPassword = bcrypt.hashSync(password, 10);\n        let userData = await models.User.create({ nick, name, email, password:hashedPassword})         \n        ctx.body = userData;\n        await next();\n    }\n    catch (error) {\n        console.error('error: ', error);\n        ctx.status = 400;\n        ctx.body = {status:'User authorization error 2'};\n    }\n})\n\nrouter.post('/login', async (ctx, next) => {\n    return passport.authenticate('local', async (err, user, info, status) => {\n        if (err){\n            return ctx.status = 400;\n        } else {\n            if (user) {\n                ctx.login(user);\n                const payload = {\n                    id:user.id,\n                    nick:user.nick\n                };\n                const accessToken = jwt.sign (payload, jwtSecret.secret, {expiresIn: jwtSecret.tokenLife});\n                const refreshToken = jwt.sign(payload, jwtSecret.refreshTokenSecret, {expiresIn:jwtSecret.refreshTokenLife});\n                ctx.body = {user:user.name, accessToken: `Bearer ${accessToken}`, refreshToken};\n            } else {\n                ctx.status = 400; \n                ctx.body = {status:'error'}\n            }\n        }    \n    }) (ctx, next);\n})\n\nrouter.post('/custom', async (ctx, next) => {\n    await passport.authenticate ('jwt', (err, user) => {\n        if (user){\n            ctx.body = 'Hello' + user.name;\n        } else {\n            ctx.body = 'No such user';\n            console.log ('Error ' + err );\n        }\n    }) (ctx,next);\n})               \n\nmodule.exports = router;"]},"metadata":{},"sourceType":"script"}