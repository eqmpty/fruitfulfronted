{"ast":null,"code":"'use strict';\n\nconst uuid = require('uuid');\n\nclass TokenGenerator {\n  constructor(bitSize, baseEncoding) {\n    if (typeof bitSize === 'string') {\n      baseEncoding = bitSize;\n      bitSize = null;\n    }\n\n    bitSize = bitSize || 128;\n    baseEncoding = baseEncoding || TokenGenerator.BASE58;\n\n    if (bitSize % 128 !== 0 || bitSize < 0) {\n      throw new Error('bitSize must be a positive integer that is a multiple of 128');\n    }\n\n    if (typeof baseEncoding !== 'string') {\n      throw new Error('baseEncoding must be a string');\n    }\n\n    this.bitSize = bitSize;\n    this.baseEncoding = baseEncoding;\n    this.base = baseEncoding.length;\n    this.tokenLength = Math.ceil(bitSize / Math.log2(this.base));\n    this._bytes = bitSize / 8;\n  }\n\n  generate() {\n    const buffer = Buffer.allocUnsafe(this._bytes);\n    var i;\n\n    for (i = 0; i < this._bytes; i += 16) {\n      uuid.v4(null, buffer, i);\n    }\n\n    if (this.baseEncoding === TokenGenerator.BASE16) {\n      return buffer.toString('hex');\n    }\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; ++i) {\n      var carry = buffer[i];\n\n      for (var j = 0; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % this.base;\n        carry = carry / this.base | 0;\n      }\n\n      while (carry > 0) {\n        digits.push(carry % this.base);\n        carry = carry / this.base | 0;\n      }\n    }\n\n    var token = digits.length < this.tokenLength ? this.baseEncoding[0].repeat(this.tokenLength - digits.length) // Leading zeros\n    : '';\n    i = digits.length;\n\n    while (i--) {\n      token += this.baseEncoding[digits[i]];\n    }\n\n    return token;\n  }\n\n}\n\nTokenGenerator.BASE16 = '0123456789abcdef';\nTokenGenerator.BASE36 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nTokenGenerator.BASE58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nTokenGenerator.BASE62 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\nTokenGenerator.BASE66 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~';\nTokenGenerator.BASE71 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!'()*-._~\";\nmodule.exports = TokenGenerator;","map":{"version":3,"sources":["/home/ouroboroser/Рабочий стол/try/node_modules/uuid-token-generator/index.js"],"names":["uuid","require","TokenGenerator","constructor","bitSize","baseEncoding","BASE58","Error","base","length","tokenLength","Math","ceil","log2","_bytes","generate","buffer","Buffer","allocUnsafe","i","v4","BASE16","toString","digits","carry","j","push","token","repeat","BASE36","BASE62","BASE66","BASE71","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst uuid = require('uuid');\n\nclass TokenGenerator {\n  constructor(bitSize, baseEncoding) {\n    if (typeof bitSize === 'string') {\n      baseEncoding = bitSize;\n      bitSize = null;\n    }\n\n    bitSize = bitSize || 128;\n    baseEncoding = baseEncoding || TokenGenerator.BASE58;\n\n    if (bitSize % 128 !== 0 || bitSize < 0) {\n      throw new Error('bitSize must be a positive integer that is a multiple of 128');\n    }\n    if (typeof baseEncoding !== 'string') {\n      throw new Error('baseEncoding must be a string');\n    }\n\n    this.bitSize = bitSize;\n    this.baseEncoding = baseEncoding;\n    this.base = baseEncoding.length;\n    this.tokenLength = Math.ceil(bitSize / Math.log2(this.base));\n\n    this._bytes = bitSize / 8;\n  }\n\n  generate() {\n    const buffer = Buffer.allocUnsafe(this._bytes);\n    var i;\n\n    for (i = 0; i < this._bytes; i += 16) {\n      uuid.v4(null, buffer, i);\n    }\n\n    if (this.baseEncoding === TokenGenerator.BASE16) {\n      return buffer.toString('hex');\n    }\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; ++i) {\n      var carry = buffer[i];\n\n      for (var j = 0; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % this.base;\n        carry = (carry / this.base) | 0;\n      }\n\n      while (carry > 0) {\n        digits.push(carry % this.base);\n        carry = (carry / this.base) | 0;\n      }\n    }\n\n    var token = digits.length < this.tokenLength\n      ? this.baseEncoding[0].repeat(this.tokenLength - digits.length) // Leading zeros\n      : '';\n\n    i = digits.length;\n\n    while (i--) {\n      token += this.baseEncoding[digits[i]];\n    }\n\n    return token;\n  }\n}\n\nTokenGenerator.BASE16 = '0123456789abcdef';\nTokenGenerator.BASE36 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nTokenGenerator.BASE58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nTokenGenerator.BASE62 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\nTokenGenerator.BASE66 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~';\nTokenGenerator.BASE71 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!'()*-._~\";\n\nmodule.exports = TokenGenerator;\n"]},"metadata":{},"sourceType":"script"}