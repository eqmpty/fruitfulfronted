{"ast":null,"code":"/**!\n * koa-body-parser - index.js\n * Copyright(c) 2014\n * MIT Licensed\n *\n * Authors:\n *   dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n *   fengmk2 <m@fengmk2.com> (http://fengmk2.com)\n */\n'use strict';\n/**\n * Module dependencies.\n */\n\nvar parse = require('co-body');\n\nvar copy = require('copy-to');\n/**\n * @param [Object] opts\n *   - {String} jsonLimit default '1mb'\n *   - {String} formLimit default '56kb'\n *   - {string} encoding default 'utf-8'\n *   - {Object} extendTypes\n */\n\n\nmodule.exports = function (opts) {\n  opts = opts || {};\n  var detectJSON = opts.detectJSON;\n  var onerror = opts.onerror;\n  var enableTypes = opts.enableTypes || ['json', 'form'];\n  var enableForm = checkEnable(enableTypes, 'form');\n  var enableJson = checkEnable(enableTypes, 'json');\n  var enableText = checkEnable(enableTypes, 'text');\n  var enableXml = checkEnable(enableTypes, 'xml');\n  opts.detectJSON = undefined;\n  opts.onerror = undefined; // force co-body return raw body\n\n  opts.returnRawBody = true; // default json types\n\n  var jsonTypes = ['application/json', 'application/json-patch+json', 'application/vnd.api+json', 'application/csp-report']; // default form types\n\n  var formTypes = ['application/x-www-form-urlencoded']; // default text types\n\n  var textTypes = ['text/plain']; // default xml types\n\n  var xmlTypes = ['text/xml', 'application/xml'];\n  var jsonOpts = formatOptions(opts, 'json');\n  var formOpts = formatOptions(opts, 'form');\n  var textOpts = formatOptions(opts, 'text');\n  var xmlOpts = formatOptions(opts, 'xml');\n  var extendTypes = opts.extendTypes || {};\n  extendType(jsonTypes, extendTypes.json);\n  extendType(formTypes, extendTypes.form);\n  extendType(textTypes, extendTypes.text);\n  extendType(xmlTypes, extendTypes.xml);\n  return async function bodyParser(ctx, next) {\n    if (ctx.request.body !== undefined) return await next();\n    if (ctx.disableBodyParser) return await next();\n\n    try {\n      const res = await parseBody(ctx);\n      ctx.request.body = 'parsed' in res ? res.parsed : {};\n      if (ctx.request.rawBody === undefined) ctx.request.rawBody = res.raw;\n    } catch (err) {\n      if (onerror) {\n        onerror(err, ctx);\n      } else {\n        throw err;\n      }\n    }\n\n    await next();\n  };\n\n  async function parseBody(ctx) {\n    if (enableJson && (detectJSON && detectJSON(ctx) || ctx.request.is(jsonTypes))) {\n      return await parse.json(ctx, jsonOpts);\n    }\n\n    if (enableForm && ctx.request.is(formTypes)) {\n      return await parse.form(ctx, formOpts);\n    }\n\n    if (enableText && ctx.request.is(textTypes)) {\n      return (await parse.text(ctx, textOpts)) || '';\n    }\n\n    if (enableXml && ctx.request.is(xmlTypes)) {\n      return (await parse.text(ctx, xmlOpts)) || '';\n    }\n\n    return {};\n  }\n};\n\nfunction formatOptions(opts, type) {\n  var res = {};\n  copy(opts).to(res);\n  res.limit = opts[type + 'Limit'];\n  return res;\n}\n\nfunction extendType(original, extend) {\n  if (extend) {\n    if (!Array.isArray(extend)) {\n      extend = [extend];\n    }\n\n    extend.forEach(function (extend) {\n      original.push(extend);\n    });\n  }\n}\n\nfunction checkEnable(types, type) {\n  return types.includes(type);\n}","map":{"version":3,"sources":["/home/ouroboroser/Рабочий стол/try/node_modules/koa-bodyparser/index.js"],"names":["parse","require","copy","module","exports","opts","detectJSON","onerror","enableTypes","enableForm","checkEnable","enableJson","enableText","enableXml","undefined","returnRawBody","jsonTypes","formTypes","textTypes","xmlTypes","jsonOpts","formatOptions","formOpts","textOpts","xmlOpts","extendTypes","extendType","json","form","text","xml","bodyParser","ctx","next","request","body","disableBodyParser","res","parseBody","parsed","rawBody","raw","err","is","type","to","limit","original","extend","Array","isArray","forEach","push","types","includes"],"mappings":"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","sourcesContent":["/**!\n * koa-body-parser - index.js\n * Copyright(c) 2014\n * MIT Licensed\n *\n * Authors:\n *   dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n *   fengmk2 <m@fengmk2.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar parse = require('co-body');\nvar copy = require('copy-to');\n\n/**\n * @param [Object] opts\n *   - {String} jsonLimit default '1mb'\n *   - {String} formLimit default '56kb'\n *   - {string} encoding default 'utf-8'\n *   - {Object} extendTypes\n */\n\nmodule.exports = function (opts) {\n  opts = opts || {};\n  var detectJSON = opts.detectJSON;\n  var onerror = opts.onerror;\n\n  var enableTypes = opts.enableTypes || ['json', 'form'];\n  var enableForm = checkEnable(enableTypes, 'form');\n  var enableJson = checkEnable(enableTypes, 'json');\n  var enableText = checkEnable(enableTypes, 'text');\n  var enableXml = checkEnable(enableTypes, 'xml');\n\n  opts.detectJSON = undefined;\n  opts.onerror = undefined;\n\n  // force co-body return raw body\n  opts.returnRawBody = true;\n\n  // default json types\n  var jsonTypes = [\n    'application/json',\n    'application/json-patch+json',\n    'application/vnd.api+json',\n    'application/csp-report',\n  ];\n\n  // default form types\n  var formTypes = [\n    'application/x-www-form-urlencoded',\n  ];\n\n  // default text types\n  var textTypes = [\n    'text/plain',\n  ];\n\n  // default xml types\n  var xmlTypes = [\n    'text/xml',\n    'application/xml',\n  ];\n\n  var jsonOpts = formatOptions(opts, 'json');\n  var formOpts = formatOptions(opts, 'form');\n  var textOpts = formatOptions(opts, 'text');\n  var xmlOpts = formatOptions(opts, 'xml');\n\n  var extendTypes = opts.extendTypes || {};\n\n  extendType(jsonTypes, extendTypes.json);\n  extendType(formTypes, extendTypes.form);\n  extendType(textTypes, extendTypes.text);\n  extendType(xmlTypes, extendTypes.xml);\n\n  return async function bodyParser(ctx, next) {\n    if (ctx.request.body !== undefined) return await next();\n    if (ctx.disableBodyParser) return await next();\n    try {\n      const res = await parseBody(ctx);\n      ctx.request.body = 'parsed' in res ? res.parsed : {};\n      if (ctx.request.rawBody === undefined) ctx.request.rawBody = res.raw;\n    } catch (err) {\n      if (onerror) {\n        onerror(err, ctx);\n      } else {\n        throw err;\n      }\n    }\n    await next();\n  };\n\n  async function parseBody(ctx) {\n    if (enableJson && ((detectJSON && detectJSON(ctx)) || ctx.request.is(jsonTypes))) {\n      return await parse.json(ctx, jsonOpts);\n    }\n    if (enableForm && ctx.request.is(formTypes)) {\n      return await parse.form(ctx, formOpts);\n    }\n    if (enableText && ctx.request.is(textTypes)) {\n      return await parse.text(ctx, textOpts) || '';\n    }\n    if (enableXml && ctx.request.is(xmlTypes)) {\n      return await parse.text(ctx, xmlOpts) || '';\n    }\n    return {};\n  }\n};\n\nfunction formatOptions(opts, type) {\n  var res = {};\n  copy(opts).to(res);\n  res.limit = opts[type + 'Limit'];\n  return res;\n}\n\nfunction extendType(original, extend) {\n  if (extend) {\n    if (!Array.isArray(extend)) {\n      extend = [extend];\n    }\n    extend.forEach(function (extend) {\n      original.push(extend);\n    });\n  }\n}\n\nfunction checkEnable(types, type) {\n  return types.includes(type);\n}\n"]},"metadata":{},"sourceType":"script"}