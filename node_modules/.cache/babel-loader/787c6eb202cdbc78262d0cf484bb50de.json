{"ast":null,"code":"/**\n * Koa unless middleware. Attach to any middleware and configure it to prevent/permit the\n * middleware in question to be executed.\n *\n * @module koa-unless\n */\n'use strict';\n\nvar url = require('url');\n/** Creates a wrapper middleware that verifies if the original middleware should be skipped. */\n\n\nmodule.exports = function (options) {\n  var originalMiddleware = this; // If a custom function was passed directly, creates a new object literal that holds it as a property called custom.\n\n  var opts = typeof options === 'function' ? {\n    custom: options\n  } : options;\n  opts.useOriginalUrl = typeof opts.useOriginalUrl === 'undefined' ? true : opts.useOriginalUrl; // Returns the middleware that wraps the original one.\n\n  return function (ctx, next) {\n    var requestedUrl = url.parse((opts.useOriginalUrl ? ctx.originalUrl : ctx.url) || '', true); // any match means 'skip original middleware'\n\n    if (matchesCustom(ctx, opts) || matchesPath(requestedUrl, opts) || matchesExtension(requestedUrl, opts) || matchesMethod(ctx.method, opts)) {\n      return next();\n    }\n\n    return originalMiddleware(ctx, next);\n  };\n};\n/**\n * Returns boolean indicating whether the custom function returns true.\n *\n * @param ctx - Koa context\n * @param opts - unless configuration\n * @returns {boolean}\n */\n\n\nfunction matchesCustom(ctx, opts) {\n  if (opts.custom) {\n    return opts.custom(ctx);\n  }\n\n  return false;\n}\n/**\n * Returns boolean indicating whether the requestUrl matches against the paths configured.\n *\n * @param requestedUrl - url requested by user\n * @param opts - unless configuration\n * @returns {boolean}\n */\n\n\nfunction matchesPath(requestedUrl, opts) {\n  var paths = !opts.path || Array.isArray(opts.path) ? opts.path : [opts.path];\n\n  if (paths) {\n    return paths.some(function (p) {\n      return typeof p === 'string' && p === requestedUrl.pathname || p instanceof RegExp && !!p.exec(requestedUrl.pathname);\n    });\n  }\n\n  return false;\n}\n/**\n * Returns boolean indicating whether the requestUrl ends with the configured extensions.\n *\n * @param requestedUrl - url requested by user\n * @param opts - unless configuration\n * @returns {boolean}\n */\n\n\nfunction matchesExtension(requestedUrl, opts) {\n  var exts = !opts.ext || Array.isArray(opts.ext) ? opts.ext : [opts.ext];\n\n  if (exts) {\n    return exts.some(function (ext) {\n      return requestedUrl.pathname.substr(ext.length * -1) === ext;\n    });\n  }\n}\n/**\n * Returns boolean indicating whether the request method matches the configured methods.\n *\n * @param method - method used (GET, POST, ...)\n * @param opts - unless configuration\n * @returns {boolean}\n */\n\n\nfunction matchesMethod(method, opts) {\n  var methods = !opts.method || Array.isArray(opts.method) ? opts.method : [opts.method];\n\n  if (methods) {\n    return !!~methods.indexOf(method);\n  }\n}","map":{"version":3,"sources":["/home/ouroboroser/Рабочий стол/try/node_modules/koa-unless/index.js"],"names":["url","require","module","exports","options","originalMiddleware","opts","custom","useOriginalUrl","ctx","next","requestedUrl","parse","originalUrl","matchesCustom","matchesPath","matchesExtension","matchesMethod","method","paths","path","Array","isArray","some","p","pathname","RegExp","exec","exts","ext","substr","length","methods","indexOf"],"mappings":"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","sourcesContent":["/**\n * Koa unless middleware. Attach to any middleware and configure it to prevent/permit the\n * middleware in question to be executed.\n *\n * @module koa-unless\n */\n\n'use strict';\nvar url = require('url');\n\n/** Creates a wrapper middleware that verifies if the original middleware should be skipped. */\nmodule.exports = function (options) {\n  var originalMiddleware = this;\n\n  // If a custom function was passed directly, creates a new object literal that holds it as a property called custom.\n  var opts = typeof options === 'function' ? { custom: options } : options;\n  opts.useOriginalUrl = (typeof opts.useOriginalUrl === 'undefined') ? true : opts.useOriginalUrl;\n\n  // Returns the middleware that wraps the original one.\n  return function (ctx, next) {\n    var requestedUrl = url.parse((opts.useOriginalUrl ? ctx.originalUrl : ctx.url) || '', true);\n\n    // any match means 'skip original middleware'\n    if (matchesCustom(ctx, opts) || matchesPath(requestedUrl, opts) ||\n      matchesExtension(requestedUrl, opts) || matchesMethod(ctx.method, opts)) {\n      return next();\n    }\n\n    return originalMiddleware(ctx, next);\n  };\n};\n\n/**\n * Returns boolean indicating whether the custom function returns true.\n *\n * @param ctx - Koa context\n * @param opts - unless configuration\n * @returns {boolean}\n */\nfunction matchesCustom(ctx, opts) {\n  if (opts.custom) {\n    return opts.custom(ctx);\n  }\n  return false;\n}\n\n/**\n * Returns boolean indicating whether the requestUrl matches against the paths configured.\n *\n * @param requestedUrl - url requested by user\n * @param opts - unless configuration\n * @returns {boolean}\n */\nfunction matchesPath(requestedUrl, opts) {\n  var paths = !opts.path || Array.isArray(opts.path) ?\n    opts.path : [opts.path];\n\n  if (paths) {\n    return paths.some(function (p) {\n        return (typeof p === 'string' && p === requestedUrl.pathname) ||\n          (p instanceof RegExp && !!p.exec(requestedUrl.pathname));\n      });\n  }\n\n  return false;\n}\n\n/**\n * Returns boolean indicating whether the requestUrl ends with the configured extensions.\n *\n * @param requestedUrl - url requested by user\n * @param opts - unless configuration\n * @returns {boolean}\n */\nfunction matchesExtension(requestedUrl, opts) {\n  var exts = !opts.ext || Array.isArray(opts.ext) ?\n    opts.ext : [opts.ext];\n\n  if (exts) {\n    return exts.some(function(ext) {\n      return requestedUrl.pathname.substr(ext.length * -1) === ext;\n    });\n  }\n}\n\n/**\n * Returns boolean indicating whether the request method matches the configured methods.\n *\n * @param method - method used (GET, POST, ...)\n * @param opts - unless configuration\n * @returns {boolean}\n */\nfunction matchesMethod(method, opts) {\n  var methods = !opts.method || Array.isArray(opts.method) ?\n    opts.method : [opts.method];\n\n  if (methods) {\n    return !!~methods.indexOf(method);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}