{"ast":null,"code":"import axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'http://localhost:3001',\n  header: {\n    'Content-Type': 'application/json;charset=UTF-8',\n    \"Access-Control-Allow-Origin\": \"*\"\n  }\n});\ninstance.defaults.headers.common['Authorization'] = `{localStorage.getItem('user')}`;\ninstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('user');\n\n  if (!config.headers.Authorization) {\n    config.headers['Authorization'] = token;\n  }\n\n  config.headers['Content-Type'] = 'application/json';\n  return config;\n}, error => {\n  Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"sources":["/home/ouroboroser/Рабочий стол/try/front/src/services/tokenprovider.js"],"names":["axios","instance","create","baseURL","header","defaults","headers","common","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAC,uBADkB;AAE1BC,EAAAA,MAAM,EAAC;AACH,oBAAgB,gCADb;AAEH,mCAA+B;AAF5B;AAFmB,CAAb,CAAjB;AAQAH,QAAQ,CAACI,QAAT,CAAkBC,OAAlB,CAA0BC,MAA1B,CAAiC,eAAjC,IAAqD,gCAArD;AAEAN,QAAQ,CAACO,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACIC,MAAM,IAAI;AACN,QAAMC,KAAK,GAAIC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAf;;AACA,MAAG,CAACH,MAAM,CAACL,OAAP,CAAeS,aAAnB,EAAkC;AAC9BJ,IAAAA,MAAM,CAACL,OAAP,CAAe,eAAf,IAAkCM,KAAlC;AACH;;AACDD,EAAAA,MAAM,CAACL,OAAP,CAAe,cAAf,IAAiC,kBAAjC;AACA,SAAOK,MAAP;AACH,CARL,EASIK,KAAK,IAAI;AACLC,EAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACH,CAXL;AAcA,eAAef,QAAf","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL:'http://localhost:3001',\n    header:{\n        'Content-Type': 'application/json;charset=UTF-8',\n        \"Access-Control-Allow-Origin\": \"*\",\n    }\n});\n\ninstance.defaults.headers.common['Authorization'] = `{localStorage.getItem('user')}`;\n\ninstance.interceptors.request.use(\n    config => {\n        const token = (localStorage.getItem('user'));\n        if(!config.headers.Authorization) {\n            config.headers['Authorization'] = token;\n        }\n        config.headers['Content-Type'] = 'application/json';\n        return config;\n    },\n    error => {\n        Promise.reject(error);\n    }\n)\n\nexport default instance;"]},"metadata":{},"sourceType":"module"}