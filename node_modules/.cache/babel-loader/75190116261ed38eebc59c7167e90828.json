{"ast":null,"code":"const passport = require('koa-passport');\n\nconst localStrategy = require('passport-local').Strategy;\n\nconst models = require('../models');\n\nconst JWTstrategy = require('passport-jwt').Strategy;\n\nconst ExtractJwt = require('passport-jwt').ExtractJwt;\n\nconst jwtSecret = require('../config/jwt_config');\n\nconst bcrypt = require('bcryptjs');\n\npassport.use(new localStrategy({\n  usernameField: 'nick',\n  passwordField: 'password',\n  session: false\n}, (nick, password, done) => {\n  try {\n    console.log('Local strategy');\n    models.User.findOne({\n      where: {\n        nick: nick\n      }\n    }).then(user => {\n      if (!user) {\n        console.log('User does not exist');\n        return done(null, false, {\n          message: 'User does not exist'\n        });\n      } else {\n        bcrypt.compare(password, user.password).then(responce => {\n          if (responce !== true) {\n            console.log('Error with password validation');\n            return done(null, false, {\n              message: 'Incorrect password'\n            });\n          }\n\n          console.log('User has logged');\n          return done(null, user);\n        });\n      } // console.log ('User has logged')\n      // return done(null, user);\n\n    });\n  } catch (err) {\n    console.log('Error with local strategy registration ' + err);\n    done(err);\n  }\n}));\npassport.serializeUser((user, cb) => {\n  cb(null, user);\n});\npassport.deserializeUser((obj, cb) => {\n  cb(null, obj);\n});\nconst opt = {\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n  secretOrKey: jwtSecret.secret\n};\npassport.use('jwt', new JWTstrategy(opt, (payload, done) => {\n  models.User.findOne({\n    where: {\n      username: payload.id\n    }\n  }).then(user => {\n    if (user) {\n      console.log('User found');\n      done(null, user);\n    } else {\n      console.log('User not found');\n      done(null, false);\n    }\n  });\n}));","map":{"version":3,"sources":["/home/ouroboroser/Рабочий стол/try/middleware/auth.js"],"names":["passport","require","localStrategy","Strategy","models","JWTstrategy","ExtractJwt","jwtSecret","bcrypt","use","usernameField","passwordField","session","nick","password","done","console","log","User","findOne","where","then","user","message","compare","responce","err","serializeUser","cb","deserializeUser","obj","opt","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","secret","payload","username","id"],"mappings":"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","sourcesContent":["const passport = require ('koa-passport');\nconst localStrategy = require ('passport-local').Strategy; \nconst models = require ('../models'); \n\nconst JWTstrategy = require('passport-jwt').Strategy; \nconst ExtractJwt = require('passport-jwt').ExtractJwt;\nconst jwtSecret = require('../config/jwt_config');\n\nconst bcrypt = require('bcryptjs');\n\n\npassport.use( new localStrategy({\n    usernameField: 'nick',\n    passwordField: 'password',\n    session: false\n},\n    (nick, password, done) => {\n        try {\n            console.log ('Local strategy')\n            models.User.findOne({\n                where: { nick: nick }                \n            }) .then ( (user) => {\n                if(!user) {\n                    console.log('User does not exist');\n                    return done (null, false, {message : 'User does not exist'});\n                } else {\n                    bcrypt.compare(password, user.password).then (responce => {\n                        if (responce !== true ) {\n                            console.log('Error with password validation');\n                            return done(null, false, {message:'Incorrect password'});\n                        }\n                        console.log ('User has logged')\n                        return done(null, user);\n                    })\n                }\n                // console.log ('User has logged')\n                // return done(null, user);\n            })\n        }\n        catch (err) {\n            console.log('Error with local strategy registration ' + err);\n            done(err);\n        }\n    }\n));\n\npassport.serializeUser((user,cb) => {\n    cb(null,user);\n})\n\npassport.deserializeUser((obj,cb) => {\n    cb(null,obj);\n})\n\nconst opt = {\n    jwtFromRequest:ExtractJwt.fromAuthHeaderAsBearerToken(),\n    secretOrKey:jwtSecret.secret \n};\n\npassport.use ( 'jwt', new JWTstrategy (opt, (payload, done) => {\n    models.User.findOne({\n        where:{\n            username:payload.id\n        },\n    }).then (user => {\n        if (user) {\n            console.log('User found');\n            done(null,user);\n        } else {\n            console.log('User not found');\n            done(null, false);\n        }\n    })\n})\n)"]},"metadata":{},"sourceType":"script"}