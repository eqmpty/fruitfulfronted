{"ast":null,"code":"// Koa and Express are fundamental different in how they deal with extensions\n// to the incoming request.\n// Express pollutes Node's IncomingRequest directly, while Koa keeps Node's\n// IncomingRequest untouched and adds is own high-level request object.\n// These both approaches are not directly compatible with each other, since\n// properties/methods found in Express' `req` object are now spread between\n// Koa's context, Koa's request object and the original incoming request.\n// This makes moking the Express `req` object an ugly task. With ES6 we could\n// simply use a Proxy, e.g.:\n//\n// function createReqMock(ctx) {\n//   // Use a proxy that forwards `req` reads to either `ctx.passport`,\n//   // Node's request, Koa's request or Koa's context. Writes are persistet\n//   // into `ctx.passport`.\n//   return Proxy.create(handler(ctx.passport, {\n//     get: function(receiver, key) {\n//       return ctx.passport[key] || ctx.req[key] || ctx.request[key] || ctx[key]\n//     }\n//   }))\n// }\n//\n// However, the current Proxy implementation does not allow debugging.\n// See: https://github.com/rkusa/koa-passport/issues/17\n//\n// Until this is fixed, koa-passport tries to properly delegate every possible\n// used property/method.\n'use strict'; // Property/Method names to be delegated\n\nlet keys = [// passport\n'_passport', 'authInfo', // http.IncomingMessage\n'httpVersion', 'headers', 'trailers', 'setTimeout', 'method', 'url', 'statusCode', 'socket', 'connection', 'protocol', // Koa's context\n'cookies', 'throw', // Others. Are not supported directly - require proper plugins/middlewares.\n'param', 'params', 'route', 'xhr', 'baseUrl', 'session', 'body', 'flash']; // remove duplicates\n\nkeys = keys.filter(function (key, i, self) {\n  return self.indexOf(key) === i;\n}); // create a delegate for each key\n\nconst properties = {\n  // mock express' .get('trust proxy')\n  app: {\n    // getter returning a mock for `req.app` containing\n    // the `.get()` method\n    get: function () {\n      const ctx = this.ctx;\n      return {\n        get: function (key) {\n          if (key === 'trust proxy') {\n            return ctx.app.proxy;\n          }\n\n          return undefined;\n        }\n      };\n    }\n  }\n};\nkeys.forEach(function (key) {\n  properties[key] = {\n    get: function () {\n      const obj = getObject(this.ctx, key);\n      if (!obj) return undefined; // if its a function, call with the proper context\n\n      if (typeof obj[key] === 'function') {\n        return function () {\n          return obj[key].apply(obj, arguments);\n        };\n      } // otherwise, simply return it\n\n\n      return obj[key];\n    },\n    set: function (value) {\n      const obj = getObject(this.ctx, key) || this.ctx.state;\n      obj[key] = value;\n    }\n  };\n}); // test where the key is available, either in `ctx.state`, Node's request,\n// Koa's request or Koa's context\n\nfunction getObject(ctx, key) {\n  if (ctx.state && key in ctx.state) {\n    return ctx.state;\n  }\n\n  if (key in ctx.request) {\n    return ctx.request;\n  }\n\n  if (key in ctx.req) {\n    return ctx.req;\n  }\n\n  if (key in ctx) {\n    return ctx;\n  }\n\n  return undefined;\n}\n\nconst IncomingMessageExt = require('passport/lib/http/request');\n\nexports.create = function (ctx, userProperty) {\n  const req = Object.create(ctx.request, properties);\n  Object.defineProperty(req, userProperty, {\n    enumerable: true,\n    get: function () {\n      return ctx.state[userProperty];\n    },\n    set: function (val) {\n      ctx.state[userProperty] = val;\n    }\n  });\n  Object.defineProperty(req, 'ctx', {\n    enumerable: true,\n    get: function () {\n      return ctx;\n    }\n  }); // add passport http.IncomingMessage extensions\n\n  req.login = IncomingMessageExt.logIn;\n  req.logIn = IncomingMessageExt.logIn;\n  req.logout = IncomingMessageExt.logOut;\n  req.logOut = IncomingMessageExt.logOut;\n  req.isAuthenticated = IncomingMessageExt.isAuthenticated;\n  req.isUnauthenticated = IncomingMessageExt.isUnauthenticated;\n  return req;\n};","map":{"version":3,"sources":["/home/ouroboroser/Рабочий стол/try/node_modules/koa-passport/lib/framework/request.js"],"names":["keys","filter","key","i","self","indexOf","properties","app","get","ctx","proxy","undefined","forEach","obj","getObject","apply","arguments","set","value","state","request","req","IncomingMessageExt","require","exports","create","userProperty","Object","defineProperty","enumerable","val","login","logIn","logout","logOut","isAuthenticated","isUnauthenticated"],"mappings":"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","sourcesContent":["// Koa and Express are fundamental different in how they deal with extensions\n// to the incoming request.\n// Express pollutes Node's IncomingRequest directly, while Koa keeps Node's\n// IncomingRequest untouched and adds is own high-level request object.\n// These both approaches are not directly compatible with each other, since\n// properties/methods found in Express' `req` object are now spread between\n// Koa's context, Koa's request object and the original incoming request.\n// This makes moking the Express `req` object an ugly task. With ES6 we could\n// simply use a Proxy, e.g.:\n//\n// function createReqMock(ctx) {\n//   // Use a proxy that forwards `req` reads to either `ctx.passport`,\n//   // Node's request, Koa's request or Koa's context. Writes are persistet\n//   // into `ctx.passport`.\n//   return Proxy.create(handler(ctx.passport, {\n//     get: function(receiver, key) {\n//       return ctx.passport[key] || ctx.req[key] || ctx.request[key] || ctx[key]\n//     }\n//   }))\n// }\n//\n// However, the current Proxy implementation does not allow debugging.\n// See: https://github.com/rkusa/koa-passport/issues/17\n//\n// Until this is fixed, koa-passport tries to properly delegate every possible\n// used property/method.\n\n'use strict'\n\n// Property/Method names to be delegated\nlet keys = [\n  // passport\n  '_passport',\n  'authInfo',\n\n  // http.IncomingMessage\n  'httpVersion',\n  'headers',\n  'trailers',\n  'setTimeout',\n  'method',\n  'url',\n  'statusCode',\n  'socket',\n  'connection',\n  'protocol',\n\n  // Koa's context\n  'cookies',\n  'throw',\n\n  // Others. Are not supported directly - require proper plugins/middlewares.\n  'param',\n  'params',\n  'route',\n  'xhr',\n  'baseUrl',\n  'session',\n  'body',\n  'flash'\n]\n\n// remove duplicates\nkeys = keys.filter(function(key, i, self) {\n  return self.indexOf(key) === i\n})\n\n// create a delegate for each key\nconst properties = {\n  // mock express' .get('trust proxy')\n  app: {\n    // getter returning a mock for `req.app` containing\n    // the `.get()` method\n    get: function() {\n      const ctx = this.ctx\n      return {\n        get: function(key) {\n          if (key === 'trust proxy') {\n            return ctx.app.proxy\n          }\n\n          return undefined\n        }\n      }\n    }\n  }\n}\n\nkeys.forEach(function(key) {\n  properties[key] = {\n    get: function() {\n      const obj = getObject(this.ctx, key)\n      if (!obj) return undefined\n\n      // if its a function, call with the proper context\n      if (typeof obj[key] === 'function') {\n        return function() {\n          return obj[key].apply(obj, arguments)\n        }\n      }\n\n      // otherwise, simply return it\n      return obj[key]\n    },\n    set: function(value) {\n      const obj = getObject(this.ctx, key) || this.ctx.state\n      obj[key] = value\n    }\n  }\n})\n\n// test where the key is available, either in `ctx.state`, Node's request,\n// Koa's request or Koa's context\nfunction getObject(ctx, key) {\n  if (ctx.state && (key in ctx.state)) {\n    return ctx.state\n  }\n\n  if (key in ctx.request) {\n    return ctx.request\n  }\n\n  if (key in ctx.req) {\n    return ctx.req\n  }\n\n  if (key in ctx) {\n    return ctx\n  }\n\n  return undefined\n}\n\nconst IncomingMessageExt = require('passport/lib/http/request')\n\nexports.create = function(ctx, userProperty) {\n  const req = Object.create(ctx.request, properties)\n\n  Object.defineProperty(req, userProperty, {\n    enumerable: true,\n    get: function() {\n      return ctx.state[userProperty]\n    },\n    set: function(val) {\n      ctx.state[userProperty] = val\n    }\n  })\n\n  Object.defineProperty(req, 'ctx', {\n    enumerable: true,\n    get: function() {\n      return ctx\n    }\n  })\n\n  // add passport http.IncomingMessage extensions\n  req.login = IncomingMessageExt.logIn\n  req.logIn = IncomingMessageExt.logIn\n  req.logout = IncomingMessageExt.logOut\n  req.logOut = IncomingMessageExt.logOut\n  req.isAuthenticated = IncomingMessageExt.isAuthenticated\n  req.isUnauthenticated = IncomingMessageExt.isUnauthenticated\n\n  return req\n}\n"]},"metadata":{},"sourceType":"script"}